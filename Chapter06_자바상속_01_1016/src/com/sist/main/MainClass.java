package com.sist.main;
/*
 * 		1. 객체 지향 프로그램
 * 			1) 데이터 보호하는 목적 : 캡술화
 * 				=> 데이터를 은닉화 => 메소드를 통해서 접근
 * 				   ------------	   ---------------
 * 					private			getter/setter (읽기/쓰기)
 * 			2) 재사용 기법 
 * 				= 반복제거 
 * 				= 상속(is-a)/포함(has-a) => 클래스의 크기를 비교할 수 있슴
 * 				= 이미 사용중에 있다 (신뢰성이 뛰어나다)
 * 				=> 재사용(상속,포함), 가독성(메소드), 견고성(예외처리)
 * 				=> 기본문법 (8장까지) => 9장부터 : 조립식(라이브러리 이용)
 * 				=> 프로그램 (네트워크, 데이터베이스)
 * 			3) 자바의 상속 (194page)
 * 			   = 재사용 목적으로 사용한다 (기존의 만들어진 클래스를 확장해서 사용)
 * 				 --------- 상속 (재사용도 하지만 기능을 변경해서 사용할 때도 많이 사용)
 * 				 		   --------------------------- 라이브러리를 상속해서 처리한다
 * 			   = 필요시에는 변경해서 사용한다 / 있는 그대로 사용한다
 * 				 ----------------------	 -----------------
 * 						상속					   포함
 * 			   = 상속과 포함의 특징 : 반복 코딩을 제거할 수 있다
 * 				 예)
 * 					윈도우 => 변경해서 사용 / 있는 그대로 사용
 * 					public class Login extends JFrame
 * 									   ------- 상속
 * 					public class Login
 * 					{
 * 						JFrame fr=new JFrame(); // 포함클래스
 * 					}
 * 					
 * 					=> 상속의 특징
 * 						1. 한개만 상속이 가능 (단일 상속)
 * 						2. 형식
 * 						   A extends B => B가 가지고 있는 모든 것을 가지고 온다
 * 						   -		 -		=> B의 구성요소 : 멤버변수, 공유변수, 메소드, 생성자, 초기화 블록
 * 						   -         -                      ------          ----
 * 						하위 클래스 	상위 클래스                   |             |
 * 																--------------- 멤버변수와 메소드만 상속가능
 * 																=> 상속의 예외조건
 * 																1) 생성자
 * 																2) 초기화 블록
 * 																3) static => 상속이 아니라 공유할 수 있다
 * 																4) 멤버변수 => 상속가능, 접근이 불가능
 * 																		     private
 * 																=> 필요한 기능만 설정
 * 																	멤버변수를 사용하려면 => private 대신 protected 사용하면 됨
 * 																=> 메소드의 기능을 변경해서 사용할 때 : ***오버라이딩 기법
 * 																	=> 속도(최적화)가 중요 => 가급적이면 상속해서 사용하지않는다
 * 																	 상속
 * 																	  class A
 *  																  class B extends A
 *  			
 *  				 									              B b=new B();	==> A 클래스 메모리 할당 => B 클래스 메모리 할당
 *  																  상속할수록 메모리 할당이 늦어짐 
 *  																  => 스프링에서는 상속 개념이 거의 없다 ( 일반 클래스로 사용 =>  처리)
 *  							 								 => 자바의 모든 클래스
 *  																	  -------- 라이브러리/ 사용자정의 클래스 => object 클래스로부터 상속을 받는다
 *  																			   class A extends Object
 *  																					   -------------- 생략이 가능 => Object가 가지고 있는 모든 기능을 사용할 수 있다
 *  	 								  
 *  											 																	            ------------- POJO
 *  						 																	  
 * 																
 * 
 * 						- 상속을 내리는 클래스 : 슈퍼 클래스, 상위 클래스, 베이스 클래스, 부모 클래스		
 * 						- 상속을 받는 클래스   : 서브 클래스, 하위 클래스, 파생 클래스, 자식 클래스
 * 
 * 			상속 : 기존에 만들어진 클래스를 확장해서 새로운 클래스를 만들어서 사용
 * 									 ------- extends
 * 			예)
 * 				class 게시판
 * 				{
 * 					글쓰기
 * 					목록 출력
 * 					상세보기
 * 					수정
 * 					삭제
 * 					검색
 * 				}
 * 
 * 				// 확장
 * 				class 갤러리게시판 extends 게시판
 * 				{
 * 					글쓰기 =====> 변경 =====> 이미지업로드
 * 					목록 출력 ==> 변경 ==> 이미지 출력
 * 					상세보기
 * 					수정
 * 					삭제
 * 					검색
 * 				}
 * 				
 * 				class 답변형게시판 extends 게시판
 * 				{
 * 					글쓰기
 * 					목록 출력
 * 					상세보기
 * 					수정
 * 					삭제
 * 					검색
 * 					==> 추가 답변
 * 				}
 * 	
 * 				=> Music
 * 				   지니 뮤직 ===> 상속 ==> 멜론
 * 				   CGV     ===> 상속 ==> 롯데시네마 / 메가박스
 * 				   상속을 받는 경우 => 변경 / 다른 기능 추가
 * 								   -----------------
 * 									변경 : 오버라이딩 / 다른기능추가 : 오버로딩 => 두 개를 다형성이라 부름
 * 				   *** 객체 지향의 3대 특성
 * 						캡슐화 / 상속, 포함 / 다형성 (오버라이딩(상속이 있어야 가능),오버로딩)
 * 						=> 필수는 아니고 권장 (캡술화, 포함 내용은 자주 나옴)
 * 						   상속 : 클래스 상속보다는 인터페이스 상속이 더 많이 나옴
 * 
 * 					동물
 * 					 |
 * 					인간
 * 					 
 * 					class  동물
 * 					class  인간 extends 동물
 * 					----- 데이터형 (사용자 정의)
 * 							|
 * 							인간, 동물 데이터형도 포함
 * 					형식)
 * 						동물 a=new 인간()
 * 						인간 b=new 인간()
 * 					*** 상속
 * 						서로 다른 클래스 여러개를 모아서 관리
 * 						----------------------------- 프로그램
 * 													  ------
 * 														통합
 * 														 int a,b~z =>26 보다는 int[] alpha
 * 														 => 한 개의 이름으로 제어할 때가 가장 잘 짠 프로그램이라 한다
 * 														 => 다른 데이터형을 모으는 것 : 클래스
 * 														 => 명령문을 모으는 것 : 메소드
 * 														 => 클래스를 모으는 것 : 상속
 * 
 
 */
class Super{
	int a,b;
	void display() {}
}
class Sub extends Super{
	// 눈애 보이진 않지만 Super 클래스 안의 내용이 다 상속됨
	//int a,b;
	//void display() {}
	public void aaa()
	{
		System.out.println("a="+a);
		System.out.println("b="+b);
		display();
	}
}
public class MainClass {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
