/*
 * 	프로그램
 * 	1. 데이터 관리 (메모리에 저장, 파일에 저장, *****RDBMS에 저장)
 * 	   --------			      ------------------------- 영구적인 저장장치
 * 			1) 데이터 저장
 * 				= 한 개 저장 : 변수
 * 				------------------------
 * 				= 같은 데이터 저장 : 배열
 * 				= 다른 데이터 저장 : 클래스
 * 					=> 메모리 주소를 이용하는 프로그램
 * 					   --------- 참조변수 => 사용자 정의 데이터형
 * 				------------------------ 관련된 데이터를 모아서 관리
 * 			2) 데이터 가공 
 * 				= 명령문 => ; 세미클론 찍는게 명령문이라 생각하면 됨
 * 				= 연산자
 * 				= 제어문
 * 				-------------------- 세개를 가지고 처리하는게 메소드
 * 			3) 가공된 데이터 출력
 * 				= 명령 프롬프트 / 윈도우 => Application
 * 				= 브라우저 => Web Application
 * 				-----------------------------------
 * 				= 모바일 => Mobile Application
 * 						  ------- Kotlin => Spring(Kotlin)
 * 				----------------------------------- 출력 형태만 다를뿐 문법 형식은 동일
 * 				= Front-End (React, Vue)
 * 							------- React-Query
 * 	2. 데이터 관리를 위한 사용자 정의 데이터형
 * 		= 클래스의 구성요소
 * 			class ClassName
 * 			{	
 * 			  ------------------
 * 				***1) 변수 설정 => 프로그램 종료시까지 사용가능
 * 						   => 지역변수
 * 							  메소드 종료 시 사라지는 변수
 * 							  => 리턴형, 매개변수
 * 						   => 전역변수
 * 							  => 리턴형, 매개변수가 단순해진다
 * 							  = 공유변수
 * 							  = 인스턴스 변수
 * 			  ------------------
 * 				2) 생성자 설정 : 변수에 대한 초기화를 담당
 * 					=> 여러 개 사용가능, 사용하지않는 경우 (컴파일러가 자동으로 초기화함 (=컴파일러에 의해 자동생성됨))
 * 			
 * 			  ------------------
 * 				*** 3) 메소드 설정
 * 			  -------------------
 * 
 * 		= 클래스의 변수의 종류
 * 		  클래스 영역에 선언하는 변수
 * 		  ---------------------- (멤버변수) ===> heap
 * 			= 인스턴스 (객체) 변수 => new를 사용할때마다 따로 저장
 * 			------------------------------ heap 영역에 저장
 * 			= 클래스 변수 => 공유변수 => static
 * 					   => Method area
 * 
 * 			자바의 메모리
 * 			------------------------
 * 			Method Area (static)
 * 			= 메소드 저장, static 변수 저장
 * 			------------------------
 * 			Heap 
 * 			= 인스턴스 변수 (멤버변수) 저장 => 프로그래머 관리 영역
 * 	     		=> 프로그래머가 메모리에 저장, 해제
 * 				*				    => GC(자동 메모리 해제) 가비지 컬렉션
 * 									=> System.gc()
 * 									   멀티미디어 할 때 많이 등장, 해제 안하면 메모리 용량이 너무 크게 됨
 * 			------------------------
 * 			Stack
 * 			= 지역변수, 매개변수 저장되는 공간 => 블록변수 {} => 메모리 자체 관리 
 * 			----------------
 * 
 * 		-------------------------------------------------------------------------------------------
 * 			변수유형          							선언위치  					메모리 저장                                           사용범위
 * 		-------------------------------------------------------------------------------------------
 * 		인스턴스 변수                              = new : 새로운 공간이 생성된다            *** 인스턴스(객체) : 메모리에 저장된 상태                                                           
 * 		=> 클래스를 메모리에 저장한 상태(=인스턴스)          => 클래스 전체에서 사용가능                     -----
 * 				class ClassName                                                              클래스에 대한 변수명
 * 				{																			 => 메모리 주소																	
 * 					int a;
 * 				}
 *  	정적 변수									= new 사용x, 컴파일시에 자동저장
 *  	=> 앞에 static 붙은 것
 *  			class ClassName
 *  			{
 *  				static int a;
 *  			}
 *  	지역 변수 : 메소드 호출시마다 생성 => 메소드 안에서 사용가능
 *  			class ClassName
 *  			{
 *  				void display()
 *  				{
 *  					int a;
 *  				}
 *  			}
 *  
 *  	< 메모리 저장 >
 *  	*** 인스턴스 : 메모리에 저장된 상태 (객체)
 *  								  -----
 *  									클래스에 대한 변수명
 *  									=> 메모리 주소
 *  
 *  		int a=10;
 *  		class A
 *  		{
 *  			int a;
 *  			int b;
 *  			int c;
 *			}
 *				=> malloc(sizeof(A)) => new로 바뀜
 *				=> free(A) => delete => 이제는사용하지않는다 (C/C++)
 *  		A a=new A()
 *  		    --- 메모리 크기를 확인
 *  			--- 메모리 확보
 *  			--- 확보된 메모리 주소를 넘겨주는 역할
 *  				----- 생성자 (멤버변수에 대한 초기화)
 *  			------- 초기값
 *  		클래스 : 설계 (필요한 데이터를 모아준다)
 *  			=> 메모리에 저장 ===> 활용 ===> 메모리 해제
 *  		*** 클래스는 한 개의 정보를 모아둔 곳
 *  		class Movie
 *  		{
 *  			---
 *  			---
 *  			---
 *  		}
 *  		Movie m1=new Movie();
 *  		Movie m2=new Movie();
 *  		Movie m3=new Movie();
 *  		...
 *  		...
 *  		활용
 *  		-----
 *  			m1. 변수명 => .은 주소 접근 연산자
 *  		해제
 *  		-----
 *  			m1=null
 *  	--------------------------------------------------------------------------------------------
 * 		= 메소드 처리
 * 		= 생성자
 * 		------------------------------------- 객체지향
 * 		= 초기화 블록
 * 		= 클래스의 종류
 * 		= 라이브러리
 * 		= 예외처리  * 
 */
// 학생 => 이름, 국어, 영어, 수학
/*
 *  파일명은 .java
 *  	   ------
 *  		=> 클래스명과 동일해야함 (대소문자 구분함)
 *  		A.java와 a.java는 다른것
 *  한 파일 안에 여러개의 클래스를 사용할 수 있다
 *  ------------------------------------
 *  class A
 *  public class B
 *  -------------- public class는 한 파일안에 1개만 사용가능
 *  			   -------------  파일명이 된다
 *  class A
 *  class B
 *  -------- 저장명은 A.java, B.java
 * 	-------- 일반적으로 저장명은 main이 있는 클래스를 저장명으로 설정
 * 
 * 		*** 같은 폴더 (src)
 * 		class A
 * 		public class MainClass1
 * 	
 * 		class A
 * 		public class MainClass2
 * 		----------------------- 오류 (A는 이미 사용중)
 */
import java.util.*;
// 가급적이면 따로 클래스를 만드는 것을 권장
// new => 저장공간을 따로 만들 수 있다
class Student 
{
	String name;
	int kor;
	int eng;
	int math;
	//멤버변수 사용 => 기본형, 클래스, 배열
}
public class MainClass {
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		String[] names=new String[3];
//		int[] kor=new int[3];
//		int[] eng=new int[3];
//		int[] math=new int[3];
//		/// 한 명에 대한 정보 => index가 같은 것을 이용한다 => 클래스
//		System.out.println(names);
		/*
		 * 		names
		 * 	-----------			---names[0]------names[1]--------names[2]------
		 * 	 @6504e3b2	---->                |               |               
		 * 	------------		-----------------------------------------------
		 * 						@6504e3b2		@6504e3b2+4     @6504e3b2+4
		 *  모든 클래스는 변수 선언 시 => 4byte (주소)
		 *  
		 */	
//		Scanner scan=new Scanner(System.in);
//		for(int i=0;i<3;i++)
//		{
//			System.out.println((i+i)+"번째 이름 입력:");
//			names[i]=scan.next();
//			System.out.println((i+i)+"번째 국어 입력:");
//			kor[i]=scan.nextInt();
//			System.out.println((i+i)+"번째 영어 입력:");
//			eng[i]=scan.nextInt();
//			System.out.println((i+i)+"번째 수학 입력:");
//			math[i]=scan.nextInt();
//		}
//		for(int i=0;i<3;i++)
//		{
//			System.out.printf("%-5d%-5d%-5d%-7d-7.2f\n",kor[i],eng[i],math[i],kor[i]+eng[i]+math[i],(kor[i]+eng[i]+math[i])/3.0);
//		}
		// 클래스 이용
		Student Lee=new Student();
		Lee.name="이선미";
		Lee.kor=100;
		Lee.eng=90;
		Lee.math=80;
		//		변수명 => 구분(객체, 인스턴스)
		//			초기화
		//클래스(사용자 정의 데이터형)
		//int    a = 10
		System.out.println("Lee"+Lee);
		Student hong=new Student();
		hong.name="홍길동";
		hong.kor=70;
		hong.eng=60;
		hong.math=50;
		System.out.println(Lee.name+""+Lee.kor+""+Lee.eng+""+Lee.math+(Lee.kor+Lee.eng+Lee.math));
		System.out.println("hong"+hong);
		Student Park=new Student();
		Park.name="박명수";
		Park.kor=40;
		Park.eng=30;
		Park.math=20;
		System.out.println("Park"+Park);
		/*
		 * 
		 * 		stack => 주소 저장
		 * 		hong
		 * 		-------------
		 * 	    	0x100
		 * 		-----------       heap ( 실제 데이터)
		 * 						  new Student
		 * 						0x100---name--------
		 * 
		 * 							----kor-------
		 * 
		 * 							----eng-------
		 * 							
		 * 							----math------
		 * 							
		 * 							--------------
		 * 																													
		 */
	}

}
