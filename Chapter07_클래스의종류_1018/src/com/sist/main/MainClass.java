package com.sist.main;
/*
 * 		언어 : 자바, 파이썬, C/C++, 코틀린, 스칼라, C#
 * 			  -----------
 * 		ML : HTML, XML, WML, HDML, VML
 * 			 ----------
 * 		JavaScript : Jquery(AJax), Vue, React, TypeScript, coffieScript, NodeJs, NextJs
 * 					 -------------------------	---------
 * 		기술 : Spring, Spring-Boot
 * 		구조 : AWS / MSA
 * 		---------------------------------------------------------------------------------
 * 			=> R, NumPy, Pandas => 아나콘다 이용, MatPlotLib
 * 			=> 머신러닝 / 딥러닝
 * 		IT 공부 => 전진 => 앞만 보고 => 모르는 부분만 보고 찾아서 공부
 * 		=====> 실무는 구현 (이론은 면접에서만)
 * 
 * 		자바
 * 		 = 데이터형 => 변수 (2장)
 * 			정수 : byte, int ,long
 * 			 	  -----      ----- 데이터분석 (빅데이터)
 * 				파일 입출력 (io)
 * 			실수 : double
 * 			논리 : boolean
 * 			문자열 : String
 * 			
 * 		 = 처리 => 연산자/제어문 (3장,4장)
 * 			단항연산자 :  ++,--(증가연산자), !(부정연산자), type (형변환연산)
 * 													형변환 : 자동형변환, 강제형변환
 * 													----- 클래스도 적용
 * 														  ----- 크기 (상속,포함) => instanceOf
 * 			이항연산자	: 산술연산자 (+,-,*,/,%)
 * 					  비교연산자 (==,!=,<,>,<=,>=)
 * 					  논리연산자 (&&,||)
 * 					  대입연산자 (=,+=,-=)
 * 			삼항연산자 : ?값1:값2
 * 
 * 			제어문
 * 			 = 조건문
 * 				----------------------
 * 				if(조건문) => 단일 조건문
 * 				if~else => 선택 조건문
 * 				----------------------
 * 				if~ else if ~ else => 다중 조건문
 * 			 = 반복문
 * 				 for(화면 출력), while(데이터베이스, 파일)
 * 				    Front			Back-end
 * 					=> 2차까지 공부
 * 			 = 반복제어문
 * 				break => 반복문 종료
 * 		 = 배열 => 1차원 
 * 					=> 클래스 배열
 * 				Music[] String[] ==> 컬렉션(배열을 보완)
 * 									-------12장 (데이터 부분의 거의 핵심요소)
 * 		= 클래스 (5,6,7장)
 * 		  구성요소
 * 		  ------
 * 		  멤버변수
 * 			= 인스턴스 변수 (중심) ===> 메모리를 따로 저장
 * 			= 정적(static) 변수 ===> 메모리 공간을 한개만 사용
 * 			  ---------------
 * 			  => 디자인 패턴 : 싱글턴 패턴
 * 			  => 팩토리 패턴
 * 			  => 스프링 만들고싶다하면 8개 패턴(컴바인드 패턴) 정도 알고있어야함
 * 			= 데이터보 보호 => 캡슐화 => private => 읽기/쓰기
 * 							getter/setter 
 * 		  메소드
 * 			= 다른 클래스와 연결
 * 			= 인스턴스 메소드 : 메모리에 따로 저장
 * 				=> 호출
 * 					객체명.메소드()
 * 					scan.next
 * 					s.replace()
 * 			= 정적메소드 : 공유 (한 개의 메소드로 모든 객체 사용)
 * 				=> 한글변환
 * 					클래스명.메소드()
 * 					Math.random()
 * 					String.valueOf()
 * 				=> 메소드
 * 				   접근지정어 : public
 * 				   리턴형 : 기본형, 클래스형, 배열
 * 								------------- 1개로 본다
 * 					 => 결과값 1개
 * 					 => 목록, 상세보기, 검색결과 => 배열, 클래스
 * 				   메소드명 : 식별자 => 소문자 시작
 * 				   매개변수 : 여러개 사용 => 사용자 요청값
 * 							3개 이상이면 => 클래스나 배열 사용이 더 좋음
 * 							=> 회원가입, 게시물 글쓰기, 영화정보 올리기
 * 		  생성자
 * 			= 멤버변수 초기화할 때 사용, 시작과 동시에 처리(사이트 처음 들어갔을 때 뜨는 창들이 다 생성자)
 * 			= 메모리 할당 시 호출된다
 * 			= 클래스는 무조건 생성자 1개 이상이 필요하다
 * 			=  없는 경우, 자동으로 1개 추가(디폴트 생성자)
 * 			*** 자동추가
 * 			1) import 자동 추가
 * 			   import java.lang.*
 * 					  ----------- String, Math, Object, System
 * 			2) 모든 클래스(라이브러리, 사용자 정의 클래스)
 * 			   => 상속 (Object)
 * 			   class MainClass (extends Object)
 * 			3) 모든 메소드는 return(메소드종료)
 * 				=> void일 경우에는 자동 return이 추가
 * 				void aaa()
 * 				{
 * 					//return;
 * 				}
 * 			4) class A
 * 				{
 * 					-------------------
 * 					public A(){}
 * 					-------------------
 * 				}
 * 			5) 자바에서 지원하는 모든 클래스는 예외처리해야함
 * 				CheckException	UncheckException
 * 						|		----------------- 예외처리 생략
 * 						|
 * 					네트워크 : URL, Socket...
 * 					IO : 파일 입출력
 * 					SQL : 오라클 연결
 * 				생성자를 사용하지 않고 초기화하는 방법
 * 				------------------------------
 * 				초기화 블록
 * 				=  인스턴스 블록 => 사용하는 곳 : 생성자
 * 				=  static 블록 => 사용하는 곳 : static 변수 (생성자를 호출하지 않아도 된다)
 * 
 * 
 * 				*** 먼저 명시적 초기화 => 불가능 (생성자,초기화블록)
 * 										| 외부에서 값을 읽어서 초기화
 * 										| 크롤링, 파일, 네트워크...
 * 		= 6장 : 객체지향 3대 특장
 * 			= 문법이 아니다, 권장사항
 * 			1) 캡슐화
 * 				=> 변수를 은닉화 : private
 * 				=> 기능 설정 => getter/setter => Lombok
 * 			2) 재사용기법 : 상속 => 기존의 클래스를 확장, 필요시에 변경해서 사용
 *						class A	
 *						class B extends A  
 * 						  포함 =>  클래스를 변경하지 않는 상태로 사용
 * 						class A	
 *						class B
 *						{
 *							A a=new A(); ==> 강제 변경 => 익명의 클래스
 *						}
 *	
 *						상속의 예외조건 : static
 *										생성자, 초기화 블록
 *										private => 상속은 가능, 접근 불가능
 *						상속 => 클래스의 크기 => 형변환
 *						class A
 *						class B extends A ==> A > B
 *							지동 형변환 => 묵시적 형변환
 *							A a=new B();
 *							------------
 *							B b=new B();
 *							A a=b;
 *							강제 형변환 => 명시적 형변환
 *							A a=new B();
 *							B b=new a;
 *							-------------많이 등장
 *							리턴형 => 클래스형
 *							=> 라이브러리에서 클래스형을 리턴
 *								----------------------
 *									=> Object를 리턴하는 경우가 많이 있다
 *
 *			3) 변경 / 추가
 *				=> 이걸 모아서 다형성이라고 함
 *				변경 : 오버라이딩
 *				추가 : 오버로딩
 *
 *			메소드 관련
 *					        오버로딩					  오버라이딩
 *			-----------------------------------------------------------------
 *			상태				같은 클래스				상속을 받은 경우
 *			------------------------------------------------------------------
 *			리턴형			관계없음						동일해야함
 *			------------------------------------------------------------------
 *			메소드명			동일해야함						동일해야함
 *			------------------------------------------------------------------
 *			매개변수			갯수나 데이터형이 달라야함		동일해야함
 *			------------------------------------------------------------------
 *			접근지정어			관계없음					축소 불가능, 확대가능
 *			------------------------------------------------------------------
 *							<-------------------- 축소
 *					private < default < protected < public
 *							---------------------> 확대		
 * 			
 * 
 * 			interface A
 * 			{ 
 * 				(public abstract) void disp();
 * 				(public abstract) void aaa();
 * 			}
 * 
 * 			=> class B implements A
 * 			   {	
 * 					void disp(){} //정상적이려면 pulic void disp(){} 이어야함
 * 					void aaa(){}
 * 					--------오류
 * 				}
 * 			
 * 			
 */
import java.util.*;
public class MainClass {
/*
 * 		class A	
 * 		{
 * 			void display(){}
 * 		}
 *		class B extends A
 *		{
 *			int a,b;
 *			void aaa(){}
 *			-----------------------
 *				void display(){}  => 변경
 *			-----------------------------
 *		}
 *
 *		A a=new B(); ==> 추상클래스, 인터페이스 //이렇게는 많이 안씀
 *		---- a.display()
 *
 *		B b=new B(); 이렇게 많이 씀
 *		----- a,b,aaa(),display()
 *  
 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List names=new ArrayList();
		//배열 대신 사용
		names.add("홍길동");//0
		String name=(String)names.get(0);
				
	}

}
